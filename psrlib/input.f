*DECK INPUT
C
C
C **********************************************************************
      SUBROUTINE INPUT ( LU, INBUF, PROMPT, IFAIL )
C **********************************************************************
C
C READS A LINE FROM UNIT IUNIT RETURNING IT IN INBUF.
C IF PROMPT IS NOT EMPTY, THEN IT IS ISSUED AS A PROMPT.
C
C IFAIL IS ZERO UNLESS AN ERROR OCCURRED.
C
      CHARACTER INBUF*(*),PROMPT*(*),PRMTCC*1,PRMPT*20,CPRMPT*(*)
      PARAMETER ( CPRMPT='->' )
      INCLUDE 'PSRLIB.DEF'
C
C     CLEAR THE ERROR CODE.
C
      IFAIL=0
C
C     OBTAIN THE LENGTH OF THE INPUT BUFFER.
C
      LBUF = LEN(INBUF)
C
C     SET THE INPUT BUFFER POINTER.
C
      IBUF = 1
C
C     SET THE INITIAL PROMPT.
C
      PRMPT=PROMPT
C
C     LABEL 100 IS THE START OF THE READING.
C
 1000 CONTINUE
C
C     CHECK WHETHER A PROMPT IS TO BE ISSUED.
C
      IF ( PRMPT.NE.' ' ) THEN
C
C        ISSUE THE PROMPT.
C
         CALL OUTPUT (LU,PRMTCC()//PRMPT)
      ENDIF
C
C     READ THE NEXT RECORD FROM UNIT LU.
C
      IF ( LU.LE.0 ) THEN
C
C        READ FROM THE DEFAULT UNIT.
C
         READ(*,100,IOSTAT=ISTAT,ERR=999,END=998) INBUF(IBUF:LBUF)
      ELSE
C
C        READ FROM THE SPECIFIED UNIT.
C
         READ(LU,100,IOSTAT=ISTAT,ERR=999,END=998) INBUF(IBUF:LBUF)
      ENDIF
C
C     INCREMENT THE RECORD COUNTER.
C
      LUREC(LU) = LUREC(LU)+1
C
C     CHECK THE LAST NON-SPACE CHARACTERS.
C
      I = LENGTH(INBUF)
      IF ( INBUF(I-1:I).EQ.' -') THEN
C
C        CONTINUATION MARKER, OBTAIN THE NEXT LINE.
C        FIRST SET THE NEW PROMPT AND UPDATE THE POINTER.
C
         PRMPT=CPRMPT
         IBUF = I
         GOTO 1000
      ENDIF
C
      RETURN
C
C     LABEL 999 IS THE EXIT POINT FOR ERROR DURING READ.
C
  999 CONTINUE
         IFAIL = 47
         CALL PSRERR('INPUT',IFAIL,ISTAT,0.0,' ')
         RETURN
C
C     LABEL 998 IS THE EXIT POINT FOR END_OF_FILE ENCOUNTERED.
C
  998 CONTINUE
         IFAIL = 1
         CALL PSRERR('INPUT',IFAIL,LU,0.0,' ')
         RETURN
C
C     FORMAT STATEMENTS.
C
  100 FORMAT(A)
C
C END OF SUBROUTINE INPUT.
C
      END
